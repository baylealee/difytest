name: Process vendorex Segmentation

on:
  push:
    paths:
      - 'vendorex.xlsx'  # 当 vendorex.xlsx 文件有变更时触发
  workflow_dispatch:    # 支持手动触发

jobs:
  process:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate with GitHub token
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Call Dify Agent API for processing
        env:
          AGENT_ID: "your_actual_agent_id"  # 请替换为您的实际 Agent ID
          DIFY_API_TOKEN: ${{ secrets.DIFY_API_TOKEN }}
        run: |
          set -e
          set -x  # 打开调试模式

          # 检查 vendorex.xlsx 是否存在
          if [ ! -f vendorex.xlsx ]; then
            echo "File vendorex.xlsx not found!"
            exit 1
          fi

          # 准备文件（使用 base64 编码）
          base64_file=$(base64 vendorex.xlsx | tr -d '\n')

          # 构建请求数据
          request_data=$(jq -n \
            --arg content "请处理以下文件" \
            --arg filename "vendorex.xlsx" \
            --arg file_content "$base64_file" \
            '{inputs: [{role: "user", content: $content, files: [{name: $filename, content: $file_content}]}]}')

          echo "Request Data: $request_data"

          # 调用 Dify Agent API
          response=$(curl -s -w "\n%{http_code}" -X POST "https://api.dify.ai/v1/agents/$AGENT_ID/chat-messages" \
            -H "Authorization: Bearer $DIFY_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$request_data")

          # 分离响应主体和 HTTP 状态码
          http_status=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$ d')

          echo "HTTP Status: $http_status"
          echo "Response Body: $response_body"

          # 检查 HTTP 状态码是否不是 200
          if [ "$http_status" -ne 200 ]; then
            echo "API request failed with status code $http_status"
            exit 1
          fi

          # 处理响应
          reply_content=$(echo "$response_body" | jq -r '.choices[0].message.content')
          file_content=$(echo "$response_body" | jq -r '.choices[0].message.files[0].content')

          if [ -z "$file_content" ] || [ "$file_content" == "null" ]; then
            echo "No file content received from API"
            echo "Reply Content: $reply_content"
            exit 1
          fi

          # 解码并保存文件
          echo "$file_content" | base64 -d > processed_vendorex.xlsx

          # 输出回复内容（摘要或错误信息）
          echo "$reply_content"

      - name: Commit the processed file back to GitHub
        run: |
          git add processed_vendorex.xlsx
          git commit -m "Processed vendorex segmentation and updated file"
          git push
